
section	.text
	global _start       ;must be declared for using gcc
	int 0x80
_start:                     ;tell linker entry point
	mov	edx, len_ms 
	mov	ecx, ms    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80   
	;Menu
	mov	edx, lenmen 
	mov	ecx, msmen    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80
	;Seleccion
	mov	edx, len    ;message length
	mov	ecx, msg    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	;SUMA
	mov	edx, lens 
	mov	ecx, mss    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80 
	;RESTA
	mov	edx, lenr 
	mov	ecx, msr    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80 
	;MULTIPLICACION
	mov	edx, lenm 
	mov	ecx, msm  
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80 
	;DIVISION
	mov	edx, lend 
	mov	ecx, msd    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80 
	;POTENCIA
	mov	edx, lenp 
	mov	ecx, msp    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80 
	;OPCION
	mov	edx, leno 
	mov	ecx, mso    
	mov	ebx, 1	    
	mov	eax, 4	    
	int	0x80
	;----------
	mov edx, 2
	mov ecx, buf
	mov eax, 3
	mov ebx, 0
	int 0x80
	;------------
	cmp byte [buf], "1"
	je suma
	cmp byte [buf], "2"
	je resta
	cmp byte [buf], "3"
	je multiplicacion
	cmp byte [buf], "4"
	je division
	cmp byte [buf], "5"
	je potencia
	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

;--------------------
suma:
    mov edx, len_sum
    mov ecx, msg_sum
    mov eax, 4
    mov ebx, 1
    int 0x80
     mov eax, 5
  mov ebx, 8
  add eax, ebx
  aam
  add eax, 3030h
  mov ebp, esp
  sub esp, 2
  mov [esp], byte ah
  mov [esp+1], byte al
  mov ecx, esp
  mov edx, 2
  mov ebx, 1
  mov eax, 4
  int 0x80
  mov esp, ebp

 jmp _start
;--------------------
    
resta:
    mov edx, len_rest
    mov ecx, msg_rest
    mov eax, 4
    mov ebx, 1
    int 0x80
     mov eax, 18
  mov ebx, 8
  sub eax, ebx
  aam
  add eax, 3030h
  mov ebp, esp
  sub esp, 2
  mov [esp], byte ah
  mov [esp+1], byte al
  mov ecx, esp
  mov edx, 2
  mov ebx, 1
  mov eax, 4
  int 0x80
  mov esp, ebp 
  
  jmp _start    
;--------------------

multiplicacion:
    mov edx, len_mul
    mov ecx, msg_mul
    mov eax, 4
    mov ebx, 1
    int 0x80
     mov eax, 6
  mov ebx, 8
  mul ebx
  aam
  add eax, 3030h
  mov ebp, esp
  sub esp, 2
  mov [esp], byte ah
  mov [esp+1], byte al
  mov ecx, esp
  mov edx, 2
  mov ebx, 1
  mov eax, 4
  int 0x80
  mov esp, ebp 
  
  jmp _start    
;--------------------

division:
    mov edx, len_div
    mov ecx, msg_div
    mov eax, 4
    mov ebx, 1
    int 0x80
 mov eax, 50
  mov ebx, 2
  mov edx, 0
  div ebx
  aam
  add eax, 3030h
  mov ebp, esp
  sub esp, 2
  mov [esp], byte ah
  mov [esp+1], byte al
  mov ecx, esp
  mov edx, 2
  mov ebx, 1
  mov eax, 4
  int 0x80
  mov esp, ebp 
  
  jmp _start 
;----------------------

potencia:
    mov edx, len_pot
    mov ecx, msg_pot
    mov eax, 4
    mov ebx, 1
    int 0x80
    mov ebx, 4;base
  mov edx, 3;exponente
 
  mov eax, 1
  mov ecx, edx
  cmp ecx, 0
  je cont
bucle:
mul ebx
loop bucle
cont:  
  aam
  add eax, 3030h
  mov ebp, esp
  sub esp, 2
  mov [esp], byte ah
  mov [esp+1], byte al
  mov ecx, esp
  mov edx, 2
  mov ebx, 1
  mov eax, 4
  int 0x80
  mov esp, ebp
  
  jmp _start 
;-----------------------
   
section	.data

ms: db "", 0xa
len_ms equ $ - ms

msmen db "------------------MENU------------------", 0xa
lenmen equ $ - msmen
msg: db "Seleccione la opcion: ", 0xa
len	equ	$ - msg

mss db  "   (1) Suma ", 0xa
lens equ $ - mss
msr db  "   (2) Resta ", 0xa
lenr equ $ - msr
msm db  "   (3) Multiplicación ", 0xa
lenm equ $ - msm
msd db  "   (4) División ", 0xa
lend equ $ - msd
msp db  "   (5) Potencia ", 0xa
lenp equ $ - msp
mso db "Opcion -> "
leno equ $ - mso

msg_sum: db "El resultado es:", 0xa
msg_res: db " "
len_sum	equ	$ - msg_sum

msg_rest: db "El resultado es: ", 0xa
len_rest equ $ - msg_rest

msg_mul: db "El resultado es:  ", 0xa
len_mul	equ	$ - msg_mul

msg_div: db "El resultado es:  ", 0xa
len_div equ	$ - msg_div

msg_pot: db "   El resultado es:", 0xa
len_pot equ	$ - msg_pot


section .bss
    buf resb 1
